{"version":3,"file":"static/js/975.d8bfac36.chunk.js","mappings":"uLAuGA,UA7FgB,YACdA,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,sBACC,IAEH,IAAMC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,WAclD,OACE,UAAC,IAAD,CAAWI,OAAO,EAAMC,UAAU,eAAlC,WACE,iBAAKA,UAAU,cAAf,WACE,gBAAKA,UAAU,gCAAf,UACE,6CAEF,gBAAKA,UAAU,gCAAf,UACE,iBAAKA,UAAU,MAAf,WACE,gBAAKA,UAAU,QAAf,UACE,kBAAOC,KAAK,OAAOD,UAAU,oBAE/B,gBAAKA,UAAU,QAAf,UACE,mBAAQA,UAAU,kBAAlB,4BAIN,gBAAKA,UAAU,0CAAf,UACE,iBAAKA,UAAU,MAAf,WACE,gBAAKA,UAAU,QAAf,UACE,kBAAOA,UAAU,0BAEnB,gBAAKA,UAAU,QAAf,UACE,mBAAQA,UAAU,wBAAlB,+BAKR,gBAAKA,UAAU,cAAf,SACGL,GACCA,EAAQO,KAAI,SAACJ,GACX,IAAIK,EAAa,GAUjB,MAToB,QAAhBL,EAAKM,OACPD,EAAa,OACY,YAAhBL,EAAKM,OACdD,EAAa,UACY,aAAhBL,EAAKM,OACdD,EAAa,SACY,aAAhBL,EAAKM,SACdD,EAAa,YAGb,gBACEH,UAAU,yCADZ,UAIE,gBAAKA,UAAU,aAAf,UACE,iBAAKA,UAAU,YAAf,WACE,eAAIA,UAAU,oBAAd,SAAmCF,EAAKO,SACxC,cAAGL,UAAU,oBAAb,SAAkCF,EAAKQ,QACvC,eAAGN,UAAU,4BAAb,WACE,SAAC,MAAD,IAAsB,IACrB,IAAIO,KAAKT,EAAKU,WAAWC,gBAC1B,cAAGT,UAAU,6BAAb,UACE,SAAC,MAAD,CACEU,QAAS,kBA5DbC,EA4D8Bb,EAAKc,IA5D/BR,EA4DoCN,EAAKM,YA3D/DS,EAAAA,EAAAA,WAAyBF,EAAIP,GAAQU,MAAK,WACxCpB,EAAAA,EAAAA,uBAFe,IAACiB,EAAIP,QA+DJ,cAAGJ,UAAU,4BAAb,UACE,SAAC,MAAD,CAAiBU,QAAS,kBAtE5BC,EAsE6Cb,EAAKc,SArEpEC,EAAAA,EAAAA,WAAyBF,GAAIG,MAAK,WAChCpB,EAAAA,EAAAA,uBAFe,IAACiB,QAwEA,cAAGX,UAAS,6BAAwBG,GAApC,SACGL,EAAKM,kBAlBTN,EAAKc,e,0ECpEpBC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAuCH,OAvCGA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,aAAAA,MACJ,SAAkBF,GAChB,OAAOI,IAAAA,KAAU,CACfV,MAAO,gBACPW,KAAM,oCACNC,KAAM,UACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,oBAClBP,MAAK,SAACQ,GACP,GAAIA,EAAOC,YACT,OAAO7B,EAAAA,EAAAA,kBAA6BiB,GAAIG,MAAK,SAACQ,GACxCA,GACFP,IAAAA,KAAU,WAAY,8BAA+B,mBAK9D,wBAED,SAAkBJ,EAAIP,GACpB,OAAOW,IAAAA,KAAU,CACfV,MAAO,gBACPmB,MAAO,SACPC,aAAc,CACZC,IAAK,MACLC,SAAU,WACVC,QAAS,UACTC,SAAU,YAEZC,WAAY1B,IACXU,MAAK,SAACQ,GACP,GAAIA,EACF,OAAO5B,EAAAA,EAAAA,kBAA6BiB,EAAIW,EAAOS,OAAOjB,MAAK,SAACkB,GAC1D,OAAOA,YAId,EAvCGnB,GA0CN","sources":["components/AllTask/AllTask.jsx","helper/AleartMessage.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport {\n  AiOutlineCalendar,\n  AiOutlineDelete,\n  AiOutlineEdit,\n} from \"react-icons/ai\";\nimport { useSelector } from \"react-redux\";\nimport ApiRequest from \"../../APIRequest/ApiRequest\";\nimport AleartMessage from \"../../helper/AleartMessage\";\nconst AllTask = () => {\n  useEffect(() => {\n    ApiRequest.SetAllTaskRequest();\n  }, []);\n\n  const allTask = useSelector((state) => state.task.allTask);\n\n  const deleteTask = (id) => {\n    AleartMessage.deleteTask(id).then(() => {\n      ApiRequest.SetAllTaskRequest();\n    });\n  };\n\n  const updateTask = (id, status) => {\n    AleartMessage.updateTask(id, status).then(() => {\n      ApiRequest.SetAllTaskRequest();\n    });\n  };\n\n  return (\n    <Container fluid={true} className=\"content-body\">\n      <div className=\"row p-0 m-0\">\n        <div className=\"col-12 col-md-3 col-lg-3 px-3\">\n          <h5>Task Canceled</h5>\n        </div>\n        <div className=\"col-12 col-md-3 col-lg-5 px-3\">\n          <div className=\"row\">\n            <div className=\"col-8\">\n              <input type=\"date\" className=\"form-control\" />\n            </div>\n            <div className=\"col-4\">\n              <button className=\"btn btn-primary\">Search</button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-12 float-end col-md-4 col-lg-4 px-2\">\n          <div className=\"row\">\n            <div className=\"col-8\">\n              <input className=\"form-control w-100\" />\n            </div>\n            <div className=\"col-4\">\n              <button className=\"btn btn-primary w-100\">Search</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row p-0 m-0\">\n        {allTask &&\n          allTask.map((task) => {\n            let badgeColor = \"\";\n            if (task.status === \"new\") {\n              badgeColor = \"info\";\n            } else if (task.status === \"pending\") {\n              badgeColor = \"primary\";\n            } else if (task.status === \"canceled\") {\n              badgeColor = \"danger\";\n            } else if (task.status === \"complate\") {\n              badgeColor = \"success\";\n            }\n            return (\n              <div\n                className=\"col-12 col-lg-4 col-sm-6 col-md-4  p-2\"\n                key={task._id}\n              >\n                <div className=\"card h-100\">\n                  <div className=\"card-body\">\n                    <h6 className=\"animated fadeInUp\">{task.title}</h6>\n                    <p className=\"animated fadeInUp\">{task.body}</p>\n                    <p className=\"m-0 animated fadeInUp p-0\">\n                      <AiOutlineCalendar />{\" \"}\n                      {new Date(task.createdAt).toDateString()}\n                      <a className=\"icon-nav text-primary mx-1\">\n                        <AiOutlineEdit\n                          onClick={() => updateTask(task._id, task.status)}\n                        />\n                      </a>\n                      <a className=\"icon-nav text-danger mx-1\">\n                        <AiOutlineDelete onClick={() => deleteTask(task._id)} />\n                      </a>\n                      <a className={`badge float-end bg-${badgeColor}`}>\n                        {task.status}\n                      </a>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </Container>\n  );\n};\n\nexport default AllTask;\n","//external import\nimport Swal from \"sweetalert2\";\nimport ApiRequest from \"../APIRequest/ApiRequest\";\n\nclass AleartMessage {\n  static deleteTask(id) {\n    return Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You won't be able to revert this!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        return ApiRequest.deleteTaskRequest(id).then((result) => {\n          if (result) {\n            Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\n          }\n        });\n      }\n    });\n  }\n\n  static updateTask(id, status) {\n    return Swal.fire({\n      title: \"Change Status\",\n      input: \"select\",\n      inputOptions: {\n        new: \"New\",\n        complate: \"Complate\",\n        pending: \"Pending\",\n        canceled: \"Canceled\",\n      },\n      inputValue: status,\n    }).then((result) => {\n      if (result) {\n        return ApiRequest.updateTaskRequest(id, result.value).then((res) => {\n          return res;\n        });\n      }\n    });\n  }\n}\n\nexport default AleartMessage;\n"],"names":["useEffect","ApiRequest","allTask","useSelector","state","task","fluid","className","type","map","badgeColor","status","title","body","Date","createdAt","toDateString","onClick","id","_id","AleartMessage","then","Swal","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","input","inputOptions","new","complate","pending","canceled","inputValue","value","res"],"sourceRoot":""}